
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  uniqueName String @unique
  password String
  nickName String
  avatarUrl String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tokens Tokens?

  friends User[] @relation("friends")
  friendOf User[] @relation("friends")

  sentBy FriendRequest[] @relation("sentBy")
  sentTo FriendRequest[] @relation("sentTo")

  messages Message[]

  chatMember ChatMember[]
}

model Tokens {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int @unique
  refreshToken String
}

model FriendRequest {
  id Int @id @default(autoincrement())

  sentById Int
  sentBy User @relation("sentBy", fields: [sentById], references: [id])

  sentToId Int
  sentTo User @relation("sentTo", fields: [sentToId], references: [id])

  createdAt DateTime @default(now())

  @@unique([sentById, sentToId])
}

model Chat {
  id Int @id @default(autoincrement())
  name String?
  isGroup Boolean

  messages Message[]

  members ChatMember[]
}

enum ChatRole {
  MEMBER
  ADMIN
}

model ChatMember {
  id Int @id @default(autoincrement())
  role ChatRole @default(MEMBER)
  joinedAt DateTime @default(now())
  
  userId Int
  user User @relation(fields: [userId], references: [id])

  chatId Int
  chat Chat @relation(fields: [chatId], references: [id])

  @@unique([chatId, userId])
}

model Message {
  id Int @id @default(autoincrement())
  content String?
  imageUrl String?
  createdAt DateTime @default(now())
  changed Boolean @default(false)
  isSeen Boolean @default(false)

  chatId Int
  chat Chat @relation(fields: [chatId], references: [id])

  userId Int
  user User @relation(fields: [userId], references: [id])
}